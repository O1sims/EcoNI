var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { h, Component } from 'preact';
import { StateSelector } from '../selector/StateSelector';
import { LayoutPrefs } from './LayoutPrefs';
import { ChevronDown } from './icons/ChevronDown';
import { Close } from './icons/Close';
import { Gear } from './icons/Gear';
import { Help } from './icons/Help';
var imgChevron = require('../../images/16/chevron-down.png');
var Controls = /** @class */ (function (_super) {
    __extends(Controls, _super);
    function Controls() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            showRendererPrefs: false,
        };
        return _this;
    }
    Controls.prototype.render = function () {
        return (h("div", { style: { width: '100%' } },
            h("div", { className: "uirStateVisControls" },
                h(StateSelector, { router: this.props.router }),
                h("div", { style: { marginLeft: 'auto', cursor: 'pointer' }, className: "uirStateVisIcons" },
                    h("span", { className: "uirStateVisHover" },
                        h(Help, { size: "16px" }),
                        h("div", { className: "hoverBlock" },
                            h("ul", null,
                                h("li", null, "Click a node to activate that state."),
                                h("li", null, "Select a state from the dropdown to activate that state."),
                                h("li", null, "Double click a node to auto-collapse that section of the tree when inactive. Collapsed nodes are displayed with a dotted outline and the count of collapsed children."),
                                h("li", null, "Lazy loaded states (including future states) are displayed with a dashed outline.")))),
                    h("span", { className: "uirStateVisHover" },
                        h(Gear, { size: "16px" }),
                        h("div", { className: "hoverBlock" },
                            h(LayoutPrefs, { onRendererChange: this.props.onRendererChange }))),
                    h("span", { className: "uirStateVisHover", onClick: this.props.onMinimize },
                        h(ChevronDown, { size: "16px" }),
                        h("div", null,
                            h("span", { style: { float: 'right' } }, "Minimize")),
                        h("div", null, "Minimize")),
                    h("span", { className: "uirStateVisHover", onClick: this.props.onClose },
                        h(Close, { size: "16px" }),
                        h("div", null,
                            h("span", { style: { float: 'right' } }, "Close")))))));
    };
    return Controls;
}(Component));
export { Controls };
//# sourceMappingURL=Controls.js.map