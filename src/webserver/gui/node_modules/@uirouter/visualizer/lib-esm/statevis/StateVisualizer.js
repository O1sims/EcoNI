var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { h, render, Component } from "preact";
import { draggable, dragActions } from "../util/draggable";
import { StateTree } from "./tree/StateTree";
import { Controls } from './Controls';
import { StateVisWindow } from './StateVisWindow';
import { DEFAULT_RENDERER } from "./renderers";
require("./statevis.css");
var StateVisualizer = /** @class */ (function (_super) {
    __extends(StateVisualizer, _super);
    function StateVisualizer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { height: null, width: null, renderer: DEFAULT_RENDERER, minimized: false };
        _this.deregisterFns = [];
        _this.svgWidth = function () { return _this.props.width || _this.state.width || 350; };
        _this.svgHeight = function () { return (_this.props.height || _this.state.height || 250) - 25; };
        return _this;
    }
    /**
     * Creates a new StateVisualizer and adds it to the document.
     *
     * @param router the UIRouter object
     * @param element (optional) the element where the StateVisualizer should be placed.
     *                If no element is passed, an element will be created in the body.
     * @param props height/width properties default: { height: 350, width: 250 }
     *
     * # Angular 1 + UI-Router (1.0.0-beta.2 and higher):
     *
     * Inject the router (`$uiRouter`) in a run block, then call StateVisualizer.create();
     *
     * ```
     * app.run(function($uiRouter) {
     *   StateVisualizer.create($uiRouter);
     * });
     * ```
     *
     * # Angular 1 + UI-Router 1.0.0-alpha.1 through 1.0.0-beta.1:
     *
     * Inject the router (`ng1UIRouter`) in a run block, then call StateVisualizer.create();
     *
     * ```
     * app.run(function(ng1UIRouter) {
     *   StateVisualizer.create(ng1UIRouter);
     * });
     * ```
     *
     * Angular 2:
     *
     * Call StateVisualizer.create() from your UIRouterConfig
     *
     * ```
     * export class MyUIRouterConfig extends UIRouterConfig {
     *   configure(router: UIRouter) {
     *     StateVisualizer.create(router);
     *   }
     * }
     * ```
     *
     * React:
     *
     * Call StateVisualizer.create() from your bootstrap
     *
     * ```
     * let router = new UIRouterReact();
     * StateVisualizer.create(router);
     * router.start();
     * ```
     *
     * @return the element that was bootstrapped.
     *         You can destroy the component using:
     *         [ReactDOM.unmountComponentAtNode](https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode)
     */
    StateVisualizer.create = function (router, element, props) {
        if (props === void 0) { props = {}; }
        if (!element) {
            element = document.createElement("div");
            element.id = "uirStateVisualizer";
        }
        var initialProps = Object.assign({}, props, { router: router, minimizeAfter: 2500 });
        var _render = function () {
            document.body.appendChild(element);
            render(h(StateVisualizer, initialProps), element);
        };
        if (document.readyState === 'interactive' || document.readyState === 'complete') {
            _render();
        }
        else {
            document.addEventListener('DOMContentLoaded', _render, false);
        }
        return element;
    };
    StateVisualizer.prototype.dispose = function () {
        var Nothing = function () { return null; };
        render(h(Nothing, null), document.body, this.el);
    };
    StateVisualizer.prototype.handleRendererChange = function (renderer) {
        this.setState({ renderer: renderer });
    };
    StateVisualizer.prototype.cancelAutoMinimize = function (ev) {
        if (this.minimizeTimeout) {
            clearTimeout(this.minimizeTimeout);
            this.minimizeTimeout = null;
        }
    };
    StateVisualizer.prototype.componentWillUnmount = function () {
        this.deregisterFns.forEach(function (fn) { return fn(); });
    };
    StateVisualizer.prototype.draggable = function (enaabled) {
        var controlsEl = this.windowEl.querySelector('.uirStateVisControls');
        var visEl = this.windowEl.querySelector('.statevis');
        this.deregisterFns.push(draggable(controlsEl, dragActions.move(this.windowEl)));
        this.deregisterFns.push(draggable(visEl, dragActions.move(this.windowEl)));
    };
    StateVisualizer.prototype.componentDidMount = function () {
        var _this = this;
        this.draggable(true);
        if (this.props.minimizeAfter) {
            var doMinimize = function () { return _this.setState({ minimized: true }); };
            this.minimizeTimeout = setTimeout(doMinimize, this.props.minimizeAfter);
        }
    };
    StateVisualizer.prototype.render = function () {
        var _this = this;
        var minimized = this.state.minimized;
        return (h("div", { ref: function (el) { return _this.el = el; }, onMouseDown: this.cancelAutoMinimize.bind(this), onMouseEnter: this.cancelAutoMinimize.bind(this) },
            h(StateVisWindow, { minimized: this.state.minimized, ref: function (windowRef) { return _this.windowEl = windowRef && windowRef.el || _this.windowEl; }, onResize: function (_a) {
                    var width = _a.width, height = _a.height;
                    return _this.setState({ width: width, height: height });
                } },
                h("div", { onClick: function () { return _this.setState({ minimized: false }); }, className: "uirStateVisWindowOverlay " + (minimized ? "minimized" : "") }),
                h(Controls, { router: this.props.router, onRendererChange: this.handleRendererChange.bind(this), onMinimize: function () { return _this.setState({ minimized: true }); }, onClose: function () { return _this.dispose(); } }),
                h(StateTree, { router: this.props.router, width: this.svgWidth(), height: this.svgHeight(), renderer: this.state.renderer }))));
    };
    return StateVisualizer;
}(Component));
export { StateVisualizer };
//# sourceMappingURL=StateVisualizer.js.map