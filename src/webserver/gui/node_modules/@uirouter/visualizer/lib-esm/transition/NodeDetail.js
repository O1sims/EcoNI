var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { h, Component } from "preact";
import { stringify, maxLength } from "../util/strings";
import { KeysAndValues } from "./KeysAndValues";
var NodeDetail = /** @class */ (function (_super) {
    __extends(NodeDetail, _super);
    function NodeDetail() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NodeDetail.prototype.stateName = function () {
        var node = this.props.node;
        var name = node && node.state && node.state.name;
        if (name === "")
            name = "(root)";
        return name && name.split(".").reverse()[0];
    };
    NodeDetail.prototype.params = function () {
        var node = this.props.node;
        return node && node.paramSchema.reduce(function (params, param) {
            params[param.id] = node.paramValues[param.id];
            return params;
        }, {});
    };
    NodeDetail.prototype.resolves = function () {
        var asString = function (val) {
            return typeof val === 'string' ? val : maxLength(30, stringify(val));
        };
        var node = this.props.node;
        var ignoredTokens = ['$stateParams', '$transition$', '$state$', this.props.trans.constructor];
        return node && node.resolvables
            .filter(function (r) { return ignoredTokens.indexOf(r.token) === -1; })
            .reduce(function (acc, r) { acc[asString(r.token)] = r.data; return acc; }, {});
    };
    NodeDetail.prototype.render = function () {
        if (!this.props.node)
            return null;
        var params = this.params();
        var resolves = this.resolves();
        return !this.props.node ? null : (h("div", { className: "uirTranVis_nodeDetail" },
            h("div", { className: "uirTranVis_heading" },
                h("div", { className: "uirTranVis_nowrap uirTranVis_deemphasize" },
                    "(",
                    this.props.type,
                    " state)"),
                h("div", { className: "uirTranVis_stateName" }, this.stateName())),
            !!Object.keys(params).length && (h("div", { className: "params" },
                h("div", { className: "uirTranVis_paramsLabel uirTranVis_deemphasize" }, "Parameter values"),
                h(KeysAndValues, { data: this.params(), classes: { div: 'uirTranVis_keyValue' }, modalTitle: "Parameter value" }))),
            !!Object.keys(resolves).length && (h("div", { className: "params resolve" },
                h("div", { className: "uirTranVis_resolveLabel uirTranVis_deemphasize" }, "Resolved data"),
                h(KeysAndValues, { data: this.resolves(), classes: { div: 'uirTranVis_keyValue' }, modalTitle: "Resolved value" })))));
    };
    return NodeDetail;
}(Component));
export { NodeDetail };
//# sourceMappingURL=NodeDetail.js.map