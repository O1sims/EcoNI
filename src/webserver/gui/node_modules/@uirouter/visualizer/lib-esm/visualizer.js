import { render, h } from "preact";
import { StateSelector } from "./selector/StateSelector";
import { StateVisualizer } from "./statevis/StateVisualizer";
import { StateTree } from "./statevis/tree/StateTree";
import { TransitionVisualizer } from "./transition/TransitionVisualizer";
var visualizer = function (router) { return new Visualizer(router, {}); };
function unmountComponent(node) {
    var Nothing = function () { return null; };
    render(h(Nothing, null), document.body, node);
}
var DEFAULTS = {
    state: true,
    transition: true,
};
var Visualizer = /** @class */ (function () {
    function Visualizer(router, options) {
        this.router = router;
        this.name = "visualizer";
        options = Object.assign({}, DEFAULTS, options);
        if (options.state) {
            this.stateVisualizerEl = StateVisualizer.create(router);
        }
        if (options.transition) {
            this.transitionVisualizerEl = TransitionVisualizer.create(router);
        }
    }
    Visualizer.prototype.dispose = function (router) {
        this.stateVisualizerEl && unmountComponent(this.stateVisualizerEl);
        this.transitionVisualizerEl && unmountComponent(this.transitionVisualizerEl);
        this.stateVisualizerEl = null;
        this.transitionVisualizerEl = null;
    };
    return Visualizer;
}());
export { Visualizer, // router.plugin(Visualizer);
visualizer, // visualizer(router);
StateVisualizer, // StateVisualizer.create(router, el?, props?)
StateTree, // StateTree.create(router, el?, props?)
TransitionVisualizer, // TransitionVisualizer.create(router, el?, props?)
StateSelector, };
//# sourceMappingURL=visualizer.js.map