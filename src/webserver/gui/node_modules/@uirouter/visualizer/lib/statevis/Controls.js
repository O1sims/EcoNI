"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = require("preact");
var StateSelector_1 = require("../selector/StateSelector");
var LayoutPrefs_1 = require("./LayoutPrefs");
var ChevronDown_1 = require("./icons/ChevronDown");
var Close_1 = require("./icons/Close");
var Gear_1 = require("./icons/Gear");
var Help_1 = require("./icons/Help");
var imgChevron = require('../../images/16/chevron-down.png');
var Controls = /** @class */ (function (_super) {
    __extends(Controls, _super);
    function Controls() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            showRendererPrefs: false,
        };
        return _this;
    }
    Controls.prototype.render = function () {
        return (preact_1.h("div", { style: { width: '100%' } },
            preact_1.h("div", { className: "uirStateVisControls" },
                preact_1.h(StateSelector_1.StateSelector, { router: this.props.router }),
                preact_1.h("div", { style: { marginLeft: 'auto', cursor: 'pointer' }, className: "uirStateVisIcons" },
                    preact_1.h("span", { className: "uirStateVisHover" },
                        preact_1.h(Help_1.Help, { size: "16px" }),
                        preact_1.h("div", { className: "hoverBlock" },
                            preact_1.h("ul", null,
                                preact_1.h("li", null, "Click a node to activate that state."),
                                preact_1.h("li", null, "Select a state from the dropdown to activate that state."),
                                preact_1.h("li", null, "Double click a node to auto-collapse that section of the tree when inactive. Collapsed nodes are displayed with a dotted outline and the count of collapsed children."),
                                preact_1.h("li", null, "Lazy loaded states (including future states) are displayed with a dashed outline.")))),
                    preact_1.h("span", { className: "uirStateVisHover" },
                        preact_1.h(Gear_1.Gear, { size: "16px" }),
                        preact_1.h("div", { className: "hoverBlock" },
                            preact_1.h(LayoutPrefs_1.LayoutPrefs, { onRendererChange: this.props.onRendererChange }))),
                    preact_1.h("span", { className: "uirStateVisHover", onClick: this.props.onMinimize },
                        preact_1.h(ChevronDown_1.ChevronDown, { size: "16px" }),
                        preact_1.h("div", null,
                            preact_1.h("span", { style: { float: 'right' } }, "Minimize")),
                        preact_1.h("div", null, "Minimize")),
                    preact_1.h("span", { className: "uirStateVisHover", onClick: this.props.onClose },
                        preact_1.h(Close_1.Close, { size: "16px" }),
                        preact_1.h("div", null,
                            preact_1.h("span", { style: { float: 'right' } }, "Close")))))));
    };
    return Controls;
}(preact_1.Component));
exports.Controls = Controls;
//# sourceMappingURL=Controls.js.map