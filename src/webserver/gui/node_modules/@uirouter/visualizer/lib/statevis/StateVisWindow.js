"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = require("preact");
var toggleClass_1 = require("../util/toggleClass");
/** A floating window that supports minimization and resizing  */
var StateVisWindow = /** @class */ (function (_super) {
    __extends(StateVisWindow, _super);
    function StateVisWindow(props) {
        var _this = _super.call(this, props) || this;
        _this.deregisterFns = [];
        _this.minimize = function () {
            // evt && evt.preventDefault();
            // evt && evt.stopPropagation();
            var el = _this.el;
            var bounds = el.getBoundingClientRect();
            _this.top = (bounds.top) + "px";
            _this.left = (bounds.left) + "px";
            _this.right = (window.innerWidth - bounds.right) + "px";
            _this.bottom = (window.innerHeight - bounds.bottom) + "px";
            el.style.top = "auto";
            el.style.left = "auto";
            el.style.right = _this.right;
            el.style.bottom = _this.bottom;
            var unminimize = function () {
                el.style.top = "auto";
                el.style.left = "auto";
                el.style.right = _this.right;
                el.style.bottom = _this.bottom;
                toggleClass_1.toggleClass('minimized')(el);
                el.removeEventListener("click", unminimize);
                var animationEndListener = function (evt) {
                    var bounds = el.getBoundingClientRect();
                    el.style.top = bounds.top + "px";
                    el.style.left = bounds.left + "px";
                    el.style.right = "auto";
                    el.style.bottom = "auto";
                    el.removeEventListener("transitionend", animationEndListener);
                };
                el.addEventListener("transitionend", animationEndListener);
            };
            toggleClass_1.addClass('minimized')(el);
            // wait 50ms to avoid coordinates jumping directly to 0/0 and avoid animation
            setTimeout(function () { return el.style.right = el.style.bottom = "0"; }, 50);
            return unminimize;
        };
        _this.state = {
            unminimize: null,
        };
        return _this;
    }
    StateVisWindow.prototype.componentWillReceiveProps = function (nextProps) {
        if (this.props.minimized !== nextProps.minimized) {
            var unminimize_1 = this.state.unminimize;
            if (unminimize_1) {
                this.setState({ unminimize: null }, function () { return unminimize_1(); });
            }
            else {
                this.setState({ unminimize: this.minimize() });
            }
        }
    };
    StateVisWindow.prototype.componentWillUnmount = function () {
        this.deregisterFns.forEach(function (fn) { return fn(); });
    };
    StateVisWindow.prototype.componentDidMount = function () {
        if (typeof MutationObserver === 'function') {
            this.monitorResizeEvents();
        }
    };
    /** The uirStateVisContainer class enables resize: both. This function listens for resize events */
    StateVisWindow.prototype.monitorResizeEvents = function () {
        var _this = this;
        var _width = this.el.style.width;
        var _height = this.el.style.height;
        var observer = new MutationObserver(function (mutations) {
            mutations.forEach(function (mutation) {
                if (mutation.attributeName == 'style') {
                    var el = mutation.target, newwidth = el['style'].width, newheight = el['style'].height;
                    if (newwidth !== _width || newheight !== _height) {
                        _width = newwidth;
                        _height = newheight;
                        var width = parseInt(newwidth.replace(/px$/, ""));
                        var height = parseInt(newheight.replace(/px$/, ""));
                        _this.props.onResize({ width: width, height: height });
                    }
                }
            });
        });
        var config = {
            attributes: true,
            childList: false,
            characterData: false,
            subtree: false,
            attributeFilter: ['style']
        };
        observer.observe(this.el, config);
        this.deregisterFns.push(function () { return observer.disconnect(); });
    };
    StateVisWindow.prototype.render = function () {
        var _this = this;
        return (preact_1.h("div", { className: "uirStateVisContainer", ref: function (el) { return _this.el = el; } }, this.props.children));
    };
    return StateVisWindow;
}(preact_1.Component));
exports.StateVisWindow = StateVisWindow;
//# sourceMappingURL=StateVisWindow.js.map