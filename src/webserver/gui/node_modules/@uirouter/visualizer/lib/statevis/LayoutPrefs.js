"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = require("preact");
var renderers_1 = require("./renderers");
var LayoutPrefs = /** @class */ (function (_super) {
    __extends(LayoutPrefs, _super);
    function LayoutPrefs() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            renderer: renderers_1.DEFAULT_RENDERER,
            presetName: 'Tree',
        };
        return _this;
    }
    LayoutPrefs.prototype.componentDidMount = function () {
        this.props.onRendererChange(this.state.renderer);
    };
    LayoutPrefs.prototype.handleZoom = function (event) {
        var el = event.target;
        var value = parseFloat(el['value']);
        var renderer = __assign({}, this.state.renderer, { zoom: value });
        this.setState({ renderer: renderer });
        this.props.onRendererChange(renderer);
    };
    LayoutPrefs.prototype.handleLayout = function (event) {
        var presetName = event.target['value'];
        var settings = renderers_1.RENDERER_PRESETS[presetName];
        var renderer = __assign({}, this.state.renderer, settings);
        this.setState({ renderer: renderer, presetName: presetName });
        this.props.onRendererChange(renderer);
    };
    LayoutPrefs.prototype.render = function () {
        return (preact_1.h("div", { className: "uirStateVisLayoutPrefs", style: { display: 'flex', flexFlow: 'column nowrap' }, onMouseDown: function (evt) { return evt.stopPropagation(); } },
            preact_1.h("div", { style: { flex: '1 1 auto', display: 'flex', flexFlow: 'row nowrap', alignItems: 'center' } },
                preact_1.h("div", null, "Layout:"),
                preact_1.h("select", { style: { marginLeft: 'auto', maxWidth: '100px' }, onChange: this.handleLayout.bind(this), value: this.state.presetName }, Object.keys(renderers_1.RENDERER_PRESETS).map(function (preset) {
                    return preact_1.h("option", { value: preset }, preset);
                }))),
            preact_1.h("div", { style: { flex: '1 1 auto', display: 'flex', flexFlow: 'row nowrap', alignItems: 'center' } },
                preact_1.h("span", null, "Node size:"),
                preact_1.h("input", { style: { marginLeft: 'auto' }, value: "" + this.state.renderer.zoom, type: "range", min: "0.3", max: "3.0", step: "0.1", onInput: this.handleZoom.bind(this) }),
                preact_1.h("span", null,
                    this.state.renderer.zoom,
                    "x"))));
    };
    return LayoutPrefs;
}(preact_1.Component));
exports.LayoutPrefs = LayoutPrefs;
//# sourceMappingURL=LayoutPrefs.js.map