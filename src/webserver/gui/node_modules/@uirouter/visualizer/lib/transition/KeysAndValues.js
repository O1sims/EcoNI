"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = require("preact");
var modal_1 = require("../util/modal");
var ResolveData_1 = require("./ResolveData");
var strings_1 = require("../util/strings");
var KeyValueRow = /** @class */ (function (_super) {
    __extends(KeyValueRow, _super);
    function KeyValueRow() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    KeyValueRow.prototype.render = function () {
        var _a = this.props, _b = _a.tuple, key = _b.key, val = _b.val, classes = _a.classes, modalTitle = _a.modalTitle;
        var showModal = function () {
            return modal_1.Modal.show(modalTitle, key, val, ResolveData_1.ResolveData);
        };
        var renderValue = function () {
            if (val === undefined)
                return preact_1.h("span", { className: "uirTranVis_code" }, "undefined");
            if (val === null)
                return preact_1.h("span", { className: "uirTranVis_code" }, "null");
            if (typeof val === 'string')
                return preact_1.h("span", { className: "uirTranVis_code" },
                    "\"",
                    strings_1.maxLength(100, val),
                    "\"");
            if (typeof val === 'number')
                return preact_1.h("span", { className: "uirTranVis_code" }, val.toString());
            if (typeof val === 'boolean')
                return preact_1.h("span", { className: "uirTranVis_code" }, val.toString());
            if (Array.isArray(val))
                return preact_1.h("span", { className: "link", onClick: showModal }, "[Array]");
            if (typeof val === 'object')
                return preact_1.h("span", { className: "link", onClick: showModal }, "[Object]");
            if (typeof val.toString === 'function')
                return preact_1.h("span", null, strings_1.maxLength(100, val.toString()));
        };
        return (preact_1.h("div", { className: classes.div },
            preact_1.h("div", { className: classes.key },
                key,
                ":"),
            preact_1.h("div", { className: classes.val }, renderValue())));
    };
    return KeyValueRow;
}(preact_1.Component));
exports.KeyValueRow = KeyValueRow;
var KeysAndValues = /** @class */ (function (_super) {
    __extends(KeysAndValues, _super);
    function KeysAndValues() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { collapseFalsy: true };
        return _this;
    }
    KeysAndValues.prototype.makeBuckets = function (definitions, data) {
        var makeBucket = function (def) { return ({
            label: def.label,
            is: function (val) { return val === def.value; },
            value: def.value,
            count: 0,
            data: {},
        }); };
        var defaultBucket = {
            label: 'default',
            is: function () { return true; },
            count: 0,
            data: {},
        };
        var buckets = definitions.map(makeBucket).concat(defaultBucket);
        Object.keys(data).forEach(function (key) {
            var bucket = buckets.find(function (bucket) { return bucket.is(data[key]); });
            bucket.data[key] = data[key];
            bucket.value = data[key];
            bucket.count++;
        });
        return buckets;
    };
    KeysAndValues.prototype.render = function () {
        var _this = this;
        var _a = this.props, data = _a.data, classes = _a.classes, modalTitle = _a.modalTitle;
        var groupedValues = this.props.groupedValues || KeysAndValues.falsyGroupDefinitions;
        var enableGroupToggle = this.props.enableGroupToggle || false;
        var isCollapsed = this.state.collapseFalsy;
        var buckets = this.makeBuckets(groupedValues, data);
        var defaultBucket = buckets.find(function (bucket) { return bucket.label === 'default'; });
        var groupedBuckets = buckets.filter(function (bucket) { return !!bucket.count && bucket !== defaultBucket; });
        var groupedCount = groupedBuckets.reduce(function (total, bucket) { return total += bucket.count; }, 0);
        var tuples = Object.keys(defaultBucket.data).map(function (key) { return ({ key: key, val: defaultBucket.data[key] }); });
        var groupedTuples = groupedBuckets.map(function (bucket) {
            var key = Object.keys(bucket.data).sort().join(', ');
            var val = bucket.value;
            return { key: key, val: val };
        });
        var showGroupToggle = enableGroupToggle && groupedCount > 1;
        return (preact_1.h("div", { className: "uirTranVis_keysAndValues" },
            tuples.map(function (tuple) { return (preact_1.h(KeyValueRow, { key: tuple.key, tuple: tuple, classes: classes, modalTitle: modalTitle })); }),
            showGroupToggle && !!groupedTuples.length && (preact_1.h("a", { href: "javascript:void(0)", onClick: function () { return _this.setState({ collapseFalsy: !isCollapsed }); }, className: "uirTranVis_keyValue" },
                isCollapsed ? 'show' : 'hide',
                " ",
                groupedCount,
                " ",
                groupedBuckets.map(function (bucket) { return bucket.label; }).join(' or '),
                " parameter values")),
            (!showGroupToggle || !this.state.collapseFalsy) && (groupedTuples.map(function (tuple) { return (preact_1.h(KeyValueRow, { key: tuple.key, tuple: tuple, classes: classes, modalTitle: modalTitle })); }))));
    };
    KeysAndValues.falsyGroupDefinitions = [
        { value: undefined, label: 'undefined' },
        { value: null, label: 'null' },
        { value: '', label: 'empty string' },
    ];
    return KeysAndValues;
}(preact_1.Component));
exports.KeysAndValues = KeysAndValues;
//# sourceMappingURL=KeysAndValues.js.map