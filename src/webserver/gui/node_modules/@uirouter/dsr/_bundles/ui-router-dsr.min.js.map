{"version":3,"file":"ui-router-dsr.min.js","sources":["../src/dsr.ts"],"sourcesContent":["import {\n  StateObject, StateDeclaration, Param, UIRouter, RawParams, StateOrName, TargetState, Transition, UIRouterPlugin,\n  TransitionService, StateService,\n} from '@uirouter/core';\n\nimport { _DSRConfig, DSRConfigObj, DSRFunction, DSRProp, ParamPredicate, RecordedDSR } from './interface';\n\nclass DSRPlugin implements UIRouterPlugin {\n  name = 'deep-state-redirect';\n\n  $transitions: TransitionService;\n  $state: StateService;\n  hookDeregFns = [];\n\n  constructor($uiRouter: UIRouter) {\n    this.$transitions = $uiRouter.transitionService;\n    this.$state = $uiRouter.stateService;\n\n    this.hookDeregFns.push(this.$transitions.onRetain({ retained: state => !!this.getDsrProp(state.self) }, this.recordDeepState.bind(this)));\n    this.hookDeregFns.push(this.$transitions.onEnter({ entering: state => !!this.getDsrProp(state.self) }, this.recordDeepState.bind(this)));\n    this.hookDeregFns.push(this.$transitions.onBefore({ to: state => !!this.getDsrProp(state.self) }, this.deepStateRedirect.bind(this)));\n  }\n\n  dispose(router: UIRouter): void {\n    this.hookDeregFns.forEach(fn => fn());\n  }\n\n  /**\n   * Resets deep state redirect\n   *\n   * A deep state is recorded for each DSR state.\n   * This function resets recorded deep state redirect(s) to the initial value.\n   *\n   * If called with no parameters, the redirects for all states are reset.\n   *\n   * If called with a `state` parameter, the redirect for that state is reset.\n   *\n   * If called with `state` and `params` parameters, the redirect for that state and set of parameter values is reset.\n   *\n   * @param state (optional) the redirect for this state will be reset\n   * @param params (optional) the redirect for the state and parameters will be reset\n   */\n  reset(state?: StateOrName, params?: RawParams): void {\n    const { $state } = this;\n    if (!state) {\n      $state.get().forEach(_state => delete _state.$$state().$dsr);\n    } else if (!params) {\n      delete $state.get(state).$$state().$dsr;\n    } else {\n      const $$state = $state.get(state).$$state();\n      $$state.$dsr = ($$state.$dsr as RecordedDSR[]).filter(this.paramsEqual($$state, params, undefined, true));\n    }\n  }\n\n  /**\n   * Returns the recorded redirect\n   *\n   * Returns the recorded redirect for a given DSR `state` (and optionally `params`).\n   *\n   * @param state the DSR state\n   * @param params (optional) the parameter values\n   *\n   * @returns the recorded redirect `TargetState`\n   */\n  getRedirect(state: StateOrName, params?: RawParams): TargetState {\n    return this.getDeepStateRedirect(state, params);\n  }\n\n  private getDsrProp(state: StateDeclaration): DSRProp {\n    return state.deepStateRedirect || state.dsr;\n  }\n\n  private getConfig(state: StateDeclaration): _DSRConfig {\n    const { $state } = this;\n    const dsrProp: DSRProp = this.getDsrProp(state);\n    if (typeof dsrProp === 'undefined') return;\n\n    let params: ParamPredicate;\n    let defaultTarget: TargetState = typeof dsrProp === 'string' ? $state.target(dsrProp) : undefined;\n    let fn: DSRFunction = typeof dsrProp === 'function' ? dsrProp : undefined;\n\n    if (typeof dsrProp === 'object') {\n      fn = dsrProp.fn;\n      if (typeof dsrProp.default === 'object') {\n        defaultTarget = $state.target(dsrProp.default.state, dsrProp.default.params, dsrProp.default.options);\n      } else if (typeof dsrProp.default === 'string') {\n        defaultTarget = $state.target(dsrProp.default);\n      }\n\n      const paramsProp = (dsrProp as DSRConfigObj).params;\n\n      if (paramsProp === true) {\n        params = () => true;\n      } else if (Array.isArray(paramsProp)) {\n        params = (param: Param) => paramsProp.indexOf(param.id) !== -1;\n      }\n    }\n\n    fn = fn || ((transition: Transition, target: TargetState) => target) as DSRFunction;\n\n    return { default: defaultTarget, params, fn };\n  }\n\n  private paramsEqual(state: StateObject,\n                      transParams: RawParams,\n                      paramPredicate: ParamPredicate = () => true,\n                      negate = false,\n  ): (redirect: RecordedDSR) => boolean {\n    const schema = state.parameters({ inherit: true }).filter(paramPredicate);\n\n    return (redirect: RecordedDSR) => {\n      const equals = Param.equals(schema, redirect.triggerParams, transParams);\n      return negate ? !equals : equals;\n    };\n  }\n\n  private recordDeepState(transition: Transition, state: StateDeclaration): void {\n    const { $state } = this;\n    const paramsConfig = this.getConfig(state).params;\n    const _state = state.$$state();\n\n    transition.promise.then( () => {\n      const transTo = transition.to();\n      const transParams = transition.params();\n      const recordedDsrTarget = $state.target(transTo, transParams);\n\n      if (paramsConfig) {\n        const recordedDSR = (_state.$dsr as RecordedDSR[]) || [];\n        const predicate = this.paramsEqual(transTo.$$state(), transParams, undefined, true);\n        _state.$dsr = recordedDSR.filter(predicate);\n        _state.$dsr.push({ triggerParams: transParams, target: recordedDsrTarget });\n      } else {\n        _state.$dsr = recordedDsrTarget;\n      }\n    });\n  }\n\n  private deepStateRedirect(transition: Transition) {\n    const opts = transition.options();\n    if (opts['ignoreDsr'] || (opts.custom && opts.custom.ignoreDsr)) return;\n\n    const config: _DSRConfig = this.getConfig(transition.to());\n    let redirect: TargetState = this.getDeepStateRedirect(transition.to(), transition.params());\n\n    redirect = config.fn(transition, redirect);\n\n    if (redirect && redirect.state() === transition.to()) return;\n\n    return redirect;\n  }\n\n  private getDeepStateRedirect(stateOrName: StateOrName, params: RawParams): TargetState {\n    const { $state } = this;\n    const _state = $state.get(stateOrName);\n    const state = _state && _state.$$state();\n    const config: _DSRConfig = this.getConfig(_state);\n    let dsrTarget: TargetState;\n\n    if (config.params) {\n      const predicate = this.paramsEqual(state, params, config.params, false);\n      const match = state.$dsr && (state.$dsr as RecordedDSR[]).filter(predicate)[0];\n      dsrTarget = match && match.target;\n    } else {\n      dsrTarget = state.$dsr as TargetState;\n    }\n\n    dsrTarget = dsrTarget || config.default;\n\n    if (dsrTarget) {\n      // merge original params with deep state redirect params\n      const targetParams = Object.assign({}, params, dsrTarget.params());\n      dsrTarget = $state.target(dsrTarget.state(), targetParams, dsrTarget.options());\n    }\n\n    return dsrTarget;\n  }\n}\n\nexport { DSRPlugin };\n"],"names":["$uiRouter","this","$transitions","transitionService","$state","stateService","hookDeregFns","push","onRetain","retained","state","_this","getDsrProp","self","recordDeepState","bind","onEnter","entering","onBefore","to","deepStateRedirect","DSRPlugin","router","forEach","fn","params","$$state","get","$dsr","filter","paramsEqual","undefined","_state","getDeepStateRedirect","dsr","dsrProp","defaultTarget","target","default","options","paramsProp_1","Array","isArray","param","indexOf","id","transition","transParams","paramPredicate","negate","schema","parameters","inherit","redirect","equals","Param","triggerParams","paramsConfig","getConfig","promise","then","transTo","recordedDsrTarget","recordedDSR","predicate","opts","custom","ignoreDsr","config","stateOrName","dsrTarget","match","targetParams","Object","assign"],"mappings":"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"}