{"version":3,"file":"ui-router-dsr.js","sources":["../src/dsr.ts"],"sourcesContent":["import {\n  StateObject, StateDeclaration, Param, UIRouter, RawParams, StateOrName, TargetState, Transition, UIRouterPlugin,\n  TransitionService, StateService,\n} from '@uirouter/core';\n\nimport { _DSRConfig, DSRConfigObj, DSRFunction, DSRProp, ParamPredicate, RecordedDSR } from './interface';\n\nclass DSRPlugin implements UIRouterPlugin {\n  name = 'deep-state-redirect';\n\n  $transitions: TransitionService;\n  $state: StateService;\n  hookDeregFns = [];\n\n  constructor($uiRouter: UIRouter) {\n    this.$transitions = $uiRouter.transitionService;\n    this.$state = $uiRouter.stateService;\n\n    this.hookDeregFns.push(this.$transitions.onRetain({ retained: state => !!this.getDsrProp(state.self) }, this.recordDeepState.bind(this)));\n    this.hookDeregFns.push(this.$transitions.onEnter({ entering: state => !!this.getDsrProp(state.self) }, this.recordDeepState.bind(this)));\n    this.hookDeregFns.push(this.$transitions.onBefore({ to: state => !!this.getDsrProp(state.self) }, this.deepStateRedirect.bind(this)));\n  }\n\n  dispose(router: UIRouter): void {\n    this.hookDeregFns.forEach(fn => fn());\n  }\n\n  /**\n   * Resets deep state redirect\n   *\n   * A deep state is recorded for each DSR state.\n   * This function resets recorded deep state redirect(s) to the initial value.\n   *\n   * If called with no parameters, the redirects for all states are reset.\n   *\n   * If called with a `state` parameter, the redirect for that state is reset.\n   *\n   * If called with `state` and `params` parameters, the redirect for that state and set of parameter values is reset.\n   *\n   * @param state (optional) the redirect for this state will be reset\n   * @param params (optional) the redirect for the state and parameters will be reset\n   */\n  reset(state?: StateOrName, params?: RawParams): void {\n    const { $state } = this;\n    if (!state) {\n      $state.get().forEach(_state => delete _state.$$state().$dsr);\n    } else if (!params) {\n      delete $state.get(state).$$state().$dsr;\n    } else {\n      const $$state = $state.get(state).$$state();\n      $$state.$dsr = ($$state.$dsr as RecordedDSR[]).filter(this.paramsEqual($$state, params, undefined, true));\n    }\n  }\n\n  /**\n   * Returns the recorded redirect\n   *\n   * Returns the recorded redirect for a given DSR `state` (and optionally `params`).\n   *\n   * @param state the DSR state\n   * @param params (optional) the parameter values\n   *\n   * @returns the recorded redirect `TargetState`\n   */\n  getRedirect(state: StateOrName, params?: RawParams): TargetState {\n    return this.getDeepStateRedirect(state, params);\n  }\n\n  private getDsrProp(state: StateDeclaration): DSRProp {\n    return state.deepStateRedirect || state.dsr;\n  }\n\n  private getConfig(state: StateDeclaration): _DSRConfig {\n    const { $state } = this;\n    const dsrProp: DSRProp = this.getDsrProp(state);\n    if (typeof dsrProp === 'undefined') return;\n\n    let params: ParamPredicate;\n    let defaultTarget: TargetState = typeof dsrProp === 'string' ? $state.target(dsrProp) : undefined;\n    let fn: DSRFunction = typeof dsrProp === 'function' ? dsrProp : undefined;\n\n    if (typeof dsrProp === 'object') {\n      fn = dsrProp.fn;\n      if (typeof dsrProp.default === 'object') {\n        defaultTarget = $state.target(dsrProp.default.state, dsrProp.default.params, dsrProp.default.options);\n      } else if (typeof dsrProp.default === 'string') {\n        defaultTarget = $state.target(dsrProp.default);\n      }\n\n      const paramsProp = (dsrProp as DSRConfigObj).params;\n\n      if (paramsProp === true) {\n        params = () => true;\n      } else if (Array.isArray(paramsProp)) {\n        params = (param: Param) => paramsProp.indexOf(param.id) !== -1;\n      }\n    }\n\n    fn = fn || ((transition: Transition, target: TargetState) => target) as DSRFunction;\n\n    return { default: defaultTarget, params, fn };\n  }\n\n  private paramsEqual(state: StateObject,\n                      transParams: RawParams,\n                      paramPredicate: ParamPredicate = () => true,\n                      negate = false,\n  ): (redirect: RecordedDSR) => boolean {\n    const schema = state.parameters({ inherit: true }).filter(paramPredicate);\n\n    return (redirect: RecordedDSR) => {\n      const equals = Param.equals(schema, redirect.triggerParams, transParams);\n      return negate ? !equals : equals;\n    };\n  }\n\n  private recordDeepState(transition: Transition, state: StateDeclaration): void {\n    const { $state } = this;\n    const paramsConfig = this.getConfig(state).params;\n    const _state = state.$$state();\n\n    transition.promise.then( () => {\n      const transTo = transition.to();\n      const transParams = transition.params();\n      const recordedDsrTarget = $state.target(transTo, transParams);\n\n      if (paramsConfig) {\n        const recordedDSR = (_state.$dsr as RecordedDSR[]) || [];\n        const predicate = this.paramsEqual(transTo.$$state(), transParams, undefined, true);\n        _state.$dsr = recordedDSR.filter(predicate);\n        _state.$dsr.push({ triggerParams: transParams, target: recordedDsrTarget });\n      } else {\n        _state.$dsr = recordedDsrTarget;\n      }\n    });\n  }\n\n  private deepStateRedirect(transition: Transition) {\n    const opts = transition.options();\n    if (opts['ignoreDsr'] || (opts.custom && opts.custom.ignoreDsr)) return;\n\n    const config: _DSRConfig = this.getConfig(transition.to());\n    let redirect: TargetState = this.getDeepStateRedirect(transition.to(), transition.params());\n\n    redirect = config.fn(transition, redirect);\n\n    if (redirect && redirect.state() === transition.to()) return;\n\n    return redirect;\n  }\n\n  private getDeepStateRedirect(stateOrName: StateOrName, params: RawParams): TargetState {\n    const { $state } = this;\n    const _state = $state.get(stateOrName);\n    const state = _state && _state.$$state();\n    const config: _DSRConfig = this.getConfig(_state);\n    let dsrTarget: TargetState;\n\n    if (config.params) {\n      const predicate = this.paramsEqual(state, params, config.params, false);\n      const match = state.$dsr && (state.$dsr as RecordedDSR[]).filter(predicate)[0];\n      dsrTarget = match && match.target;\n    } else {\n      dsrTarget = state.$dsr as TargetState;\n    }\n\n    dsrTarget = dsrTarget || config.default;\n\n    if (dsrTarget) {\n      // merge original params with deep state redirect params\n      const targetParams = Object.assign({}, params, dsrTarget.params());\n      dsrTarget = $state.target(dsrTarget.state(), targetParams, dsrTarget.options());\n    }\n\n    return dsrTarget;\n  }\n}\n\nexport { DSRPlugin };\n"],"names":["Param"],"mappings":"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"}